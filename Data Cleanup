#Had to install pip as well as beautifulsoup4, and requests
#pip install beautifulsoup4
#pip install requests
from bs4 import BeautifulSoup
import requests
import string
import sqlite3

#Create file under same folder titled "IPDSProjectdb.sqlite"
conn = sqlite3.connect("fareboxdb.sqlite")
cur = conn.cursor ()

#List of table rows to hold rows from wikipedia page table
table = []

#Get the wikipedia page via requests
wikiPage = requests.get("https://en.wikipedia.org/wiki/Farebox_recovery_ratio")

#Pass the page content to BS4 to parse
soup = BeautifulSoup(wikiPage.content, "html.parser")

#Select the table on the page (first element from findAll array)
htmlTable = soup.find("table", {"class": "wikitable"})
#Loop through table rows in the body of the table (not the head)
for row in htmlTable.find("tbody").findAll("tr"):
    #Get all the cells in the current row
    cells = row.findAll("td")
    if(len(cells) == 7):
        ###Store value from each cell in the appropriate variable###
        continent = cells[0].find(text=True).replace("\n","").replace("\r","")
        country = cells[1].find(text=True).replace("\n","").replace("\r","")
        system = cells[2].find(text=True).replace("\n","").replace("\r","")

        #Replace any %'s in the string, convert to float, divide by 100 to get as % fraction/decimal
        ratio = round((float(cells[3].find(text=True).replace("%",""))/100),4)
        #made all the fare systems only have 1 identifier : distance, flat, zone ect. 
        fare_system =cells[4].find(text=True).replace("\n","").replace("\r","").split(" ")[0]
        #made all lower case 
        fare_system= fare_system.lower()
        #Had to use getText() to grab all the text in the cell- was only grabbing the currency type
        #had to use .replace .split .strip and splicing as well as [0] in order to clean the more consitant data.
        non_ascii_fare_rate = cells[5].getText().replace("C","").replace("$", "").replace("A","").replace("US", "").replace("+", "")\
        .replace("NY","").replace("SEK","44").replace("/", "").replace("PKR","20").replace("NT","").replace("HK3.5","3.5").replace("SGD","1.1").replace("(", "").replace("ZK", "24")\
        .replace("4-11", "4").replace("[", "").replace("Bus", "").replace("From", "3.75").replace(")", "").replace("HF", "4.3").replace("EUR","").strip()[:4].split(" ")[0]
        #Special condition, this row was really complicated and the only one messing it up so we handled it specifically
        if(system == "Washington, DC (WMATA)"):
            non_ascii_fare_rate = "2"
        #Strip non-ASCII characters from fare rates
        printable = set(string.printable)
        fare_rate = ''.join(filter(lambda x: x in string.printable, non_ascii_fare_rate))

        #Converting fare rates from strings to floats (if fare rate is empty set it to null or None)
        if(fare_rate == ""):
            fare_rate = float(0)
        else:
            fare_rate = float(fare_rate)


        #Only grab the first 4 characters to get the earliest year in the string and convert to int
        year = int(cells[6].find(text=True)[:4])


        #Store variables in a dictionary
        newRow = {
            "continent":continent,
            "country":country,
            "system":system,
            "ratio":ratio,
            "fare_system":fare_system,
            "fare_rate":fare_rate,
            "year":year
        }
        #Add new row to table list for storage
        table.append(newRow)

############################################Conversion to USD##################################################

FxRate = {"US" : 1,
          "Japan" : 0.0089,
          "Canada" : 0.74,
          "China" : 0.15,
          "Switzerland" : 1.01,
          "France" : 1.14,
          "Austria" : 1.14,
          "Germany" : 1.14,
          "Italy" : 1.14,
          "Finland" : 1.14,
          "Netherlands" : 1.14,
          "Belgium" : 1.14,
          "Denmark" : 1.14,
          "Spain" : 1.14,
          "UK" : 1.28,
          "Czech Republic" : 0.044,
          "Sweden" : 0.11,
          "Singapore" : 0.73,
          "Taiwan" : 0.032,
          "Pakistan" : 0.0072,
          "Hong Kong" : 0.13,
          "Australia" : 0.72,
          "New Zealand" : 0.69}

for r in table:
    r["fare_rate"] *= FxRate[r["country"]]

#################################################VIEWING DATA##################################################


for row in table:
    for key,value in row.items():
        print key, "->", value
    print("\n\n")
##############################################MOVING DATA TO SQL###############################

#remove table if already exists and any data it contains
cur.execute('DROP TABLE IF EXISTS farebox_data;')

#create the table within the database
sql = '''CREATE TABLE farebox_data ('continent' TEXT, 'country' TEXT, 'system' TEXT, 'ratio' REAL,
                                'fare_system' TEXT, 'fare_rate' REAL, 'year' TEXT)'''

cur.execute(sql)

#joining python data and sql together
cur.executemany("""
    INSERT INTO
        farebox_data (continent, country, system, ratio, fare_system, fare_rate, year)
    VALUES
        (:continent, :country, :system, :ratio, :fare_system, :fare_rate, :year)""", table)
        
conn.commit()
conn.close()
